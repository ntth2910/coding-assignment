{"version":3,"file":"main.js","mappings":"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","sources":["webpack://nrwl-coding-assignment/./server/src/app/app.module.ts","webpack://nrwl-coding-assignment/./server/src/tickets/tickets.controller.ts","webpack://nrwl-coding-assignment/./server/src/tickets/tickets.module.ts","webpack://nrwl-coding-assignment/./server/src/tickets/tickets.service.ts","webpack://nrwl-coding-assignment/./server/src/users/users.controller.ts","webpack://nrwl-coding-assignment/./server/src/users/users.module.ts","webpack://nrwl-coding-assignment/./server/src/users/users.service.ts","webpack://nrwl-coding-assignment/./server/src/utils/random-delay.ts","webpack://nrwl-coding-assignment/external commonjs \"@nestjs/common\"","webpack://nrwl-coding-assignment/external commonjs \"@nestjs/core\"","webpack://nrwl-coding-assignment/external commonjs \"tslib\"","webpack://nrwl-coding-assignment/webpack/bootstrap","webpack://nrwl-coding-assignment/./server/src/main.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\n\nimport { UsersModule } from '../users/users.module';\nimport { TicketsModule } from '../tickets/tickets.module';\n\n@Module({\n  imports: [UsersModule, TicketsModule],\n})\nexport class AppModule {}\n","import {\n  NotFoundException,\n  UnprocessableEntityException,\n  Controller,\n  Get,\n  Put,\n  Post,\n  Param,\n  Delete,\n  Body,\n  HttpCode,\n} from \"@nestjs/common\";\nimport { randomDelay } from \"../utils/random-delay\";\nimport { TicketsService } from \"./tickets.service\";\n\n@Controller(\"tickets\")\nexport class TicketsController {\n  constructor(private ticketsService: TicketsService) {}\n\n  @Get()\n  async getTickets() {\n    await randomDelay();\n    return this.ticketsService.tickets();\n  }\n\n  @Get(\":id\")\n  async getTicket(@Param(\"id\") id: string) {\n    await randomDelay();\n    const ticket = await this.ticketsService.ticket(Number(id));\n    if (ticket) return ticket;\n    throw new NotFoundException();\n  }\n\n  @Post()\n  async createTicket(@Body() createDto: { description: string }) {\n    await randomDelay();\n    return this.ticketsService.newTicket(createDto);\n  }\n\n  @Put(\":ticketId/assign/:userId\")\n  @HttpCode(204)\n  async assignTicket(\n    @Param(\"ticketId\") ticketId: string,\n    @Param(\"userId\") userId: string\n  ) {\n    await randomDelay();\n    const success = await this.ticketsService.assign(\n      Number(ticketId),\n      Number(userId)\n    );\n    if (!success) throw new UnprocessableEntityException();\n  }\n\n  @Put(\":ticketId/unassign\")\n  @HttpCode(204)\n  async unassignTicket(@Param(\"ticketId\") ticketId: string) {\n    await randomDelay();\n    const success = await this.ticketsService.unassign(Number(ticketId));\n    if (!success) throw new UnprocessableEntityException();\n  }\n\n  @Put(\":id/complete\")\n  @HttpCode(204)\n  async markAsComplete(@Param(\"id\") ticketId: string) {\n    await randomDelay();\n    const success = await this.ticketsService.complete(Number(ticketId), true);\n    if (!success) throw new UnprocessableEntityException();\n  }\n\n  @Delete(\":id/complete\")\n  @HttpCode(204)\n  async markAsIncomplete(@Param(\"id\") ticketId: string) {\n    await randomDelay();\n    const success = await this.ticketsService.complete(Number(ticketId), false);\n    if (!success) throw new UnprocessableEntityException();\n  }\n\n  @Delete(\":id\")\n  @HttpCode(204)\n  async deleteTicket(@Param(\"id\") ticketId: string) {\n    await randomDelay();\n    const success = await this.ticketsService.delete(Number(ticketId));\n    if (!success) throw new NotFoundException();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { TicketsService } from './tickets.service';\nimport { UsersModule } from '../users/users.module';\nimport { TicketsController } from './tickets.controller';\n\n@Module({\n  imports: [UsersModule],\n  controllers: [TicketsController],\n  providers: [TicketsService],\n})\nexport class TicketsModule {}\n","import { Injectable } from \"@nestjs/common\";\nimport { Ticket } from \"@acme/shared-models\";\nimport { UsersService } from \"../users/users.service\";\n\n@Injectable()\nexport class TicketsService {\n  /*\n   * In-memory storage so data is lost on server restart.\n   */\n  private storedTickets: Ticket[] = [\n    {\n      id: 1,\n      description: \"Install a monitor arm\",\n      assigneeId: 1,\n      completed: false,\n    },\n    {\n      id: 2,\n      description: \"Move the desk to the new location\",\n      assigneeId: 1,\n      completed: false,\n    },\n  ];\n\n  private nextId = 3;\n\n  constructor(private usersService: UsersService) {}\n\n  async tickets(): Promise<Ticket[]> {\n    return this.storedTickets;\n  }\n\n  async ticket(id: number): Promise<Ticket | null> {\n    return this.storedTickets.find((t) => t.id === id) ?? null;\n  }\n\n  async newTicket(payload: { description: string }): Promise<Ticket> {\n    const newTicket: Ticket = {\n      id: this.nextId++,\n      description: payload.description,\n      assigneeId: null,\n      completed: false,\n    };\n\n    this.storedTickets.push(newTicket);\n\n    return newTicket;\n  }\n\n  async assign(ticketId: number, userId: number): Promise<boolean> {\n    const ticket = await this.ticket(ticketId);\n    const user = await this.usersService.user(userId);\n\n    if (ticket && user) {\n      ticket.assigneeId = +userId;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  async unassign(ticketId: number): Promise<boolean> {\n    const ticket = await this.ticket(ticketId);\n    if (ticket) {\n      ticket.assigneeId = null;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  async complete(ticketId: number, completed: boolean): Promise<boolean> {\n    const ticket = await this.ticket(ticketId);\n    if (ticket) {\n      ticket.completed = completed;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  async delete(id: number): Promise<boolean> {\n    const index = this.storedTickets.findIndex((ticket) => ticket.id === id);\n    if (index === -1) return false;\n\n    this.storedTickets.splice(index, 1);\n    return true;\n  }\n}\n","import {\n  Controller,\n  Get,\n  Param,\n  NotFoundException,\n  Post,\n  Delete,\n  Body,\n} from \"@nestjs/common\";\nimport { randomDelay } from \"../utils/random-delay\";\nimport { UsersService } from \"./users.service\";\n\n@Controller(\"users\")\nexport class UsersController {\n  constructor(private usersService: UsersService) {}\n\n  @Get()\n  async getUsers() {\n    return this.usersService.users();\n  }\n\n  @Get(\":id\")\n  async getUser(@Param(\"id\") id: string) {\n    await randomDelay();\n    const user = await this.usersService.user(Number(id));\n    if (user) return user;\n    throw new NotFoundException();\n  }\n\n  @Post()\n  async createUser(@Body() body: { name: string }) {\n    await randomDelay();\n    return this.usersService.newUser({ name: body.name });\n  }\n\n  @Delete(\":id\")\n  async deleteUser(@Param(\"id\") id: string) {\n    await randomDelay();\n    const success = await this.usersService.deleteUser(Number(id));\n    if (!success) throw new NotFoundException();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n","import { Injectable } from \"@nestjs/common\";\nimport { User } from \"@acme/shared-models\";\n\n@Injectable()\nexport class UsersService {\n  /*\n   * In-memory storage so data is lost on server restart.\n   */\n  private storedUsers: User[] = [\n    { id: 1, name: \"Alice\" },\n    { id: 2, name: \"Bob\" },\n    { id: 3, name: \"Chris\" },\n    { id: 4, name: \"Daisy\" },\n    { id: 5, name: \"Ed\" },\n  ];\n\n  async users(): Promise<User[]> {\n    return this.storedUsers;\n  }\n\n  async user(id: number): Promise<User | null> {\n    return this.storedUsers.find((user) => user.id === +id) ?? null;\n  }\n\n  async newUser(payload: { name: string }): Promise<User> {\n    const maxId = Math.max(0, ...this.storedUsers.map((u) => u.id));\n    const newUser: User = {\n      id: maxId + 1,\n      name: payload.name,\n    };\n\n    this.storedUsers.push(newUser);\n\n    return newUser;\n  }\n\n  async deleteUser(id: number): Promise<boolean> {\n    const index = this.storedUsers.findIndex((user) => user.id === +id);\n    if (index !== -1) {\n      this.storedUsers.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n}\n","export function randomDelay(maxDelay = 1000): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n    }, Math.random() * maxDelay);\n  });\n}\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const globalPrefix = 'api';\n  app.setGlobalPrefix(globalPrefix);\n  const port = process.env.PORT || 3333;\n  await app.listen(port);\n  Logger.log(`🚀 Application is running on: http://localhost:${port}/${globalPrefix}`);\n}\n\nbootstrap();\n"],"names":["AppModule","Module","imports","UsersModule","TicketsModule","TicketsController","constructor","ticketsService","getTickets","randomDelay","this","tickets","getTicket","id","ticket","Number","NotFoundException","createTicket","createDto","newTicket","assignTicket","ticketId","userId","assign","UnprocessableEntityException","unassignTicket","unassign","markAsComplete","complete","markAsIncomplete","deleteTicket","delete","Get","Param","Post","Body","Put","HttpCode","Delete","Controller","TicketsService","controllers","providers","usersService","storedTickets","description","assigneeId","completed","nextId","find","t","payload","push","user","index","findIndex","splice","Injectable","UsersService","UsersController","getUsers","users","getUser","createUser","body","newUser","name","deleteUser","exports","storedUsers","Math","max","map","u","maxDelay","Promise","resolve","setTimeout","random","module","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","app","NestFactory","create","setGlobalPrefix","port","process","env","PORT","listen","Logger","log","bootstrap"],"sourceRoot":""}